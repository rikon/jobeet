<?php

namespace Ibw\JobeetBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Ibw\JobeetBundle\Entity\Job;

/**
 * JobRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JobRepository extends EntityRepository
{
	public function getActiveJobs($category_id = null, $max = null, $offset = null, $affiliate_id = null)
	{
		$qb = $this->createQueryBuilder('j')
			->where('j.expires_at > :date')
			->setParameter('date', date('Y-m-d H:i:s', time()))
			->andWhere('j.is_activated=:activated')
			->setParameter('activated', 1)
			->orderBy('j.expires_at', 'DESC');
		
		
		if($category_id) {
			$qb->andWhere('j.category = :category_id')
				->setParameter('category_id', $category_id);
		}
		
		if($max) {
			$qb->setMaxResults($max);
		}
		
		if($offset) {
			$qb->setFirstResult($offset);
		}
		
		
		if($affiliate_id) {
			$qb->leftJoin('j.category', 'c')
				->leftJoin('c.affiliates', 'a')
				->andWhere('a.id = :affiliate_id')
				->setParameter('affiliate_id', $affiliate_id)
			;	
		}
		
		$query = $qb->getQuery();
		return $query->getResult();
		
	}
	
	
	public function getActiveJob($id)
	{
		
		
		try {
			$query = $this->createQueryBuilder('j')
				->where('j.id = :id')
				->andWhere('j.expires_at > :date')
				->andWhere('j.is_activated=:activated')
				->setParameter('id', $id)
				->setParameter('date', date('Y-m-d H:i:s', time()))
				->setParameter('activated', 1)
				->setMaxResults(1)
				->getQuery();
			
			$job = $query->getSingleResult();
				
		} catch(\Doctrine\Orm\NoResultException $e) {
			$job = null;
		}
		
		return $job;
	}
	
	
	public function countActiveJobs($category_id = null)
	{
		$qb = $this->createQueryBuilder('j')
				->select('count(j.id)')
				->where('j.expires_at > :date')
				->andWhere('j.is_activated=:activated')
				->setParameter('date', date('Y-m-d H:i:s', time()))
				->setParameter('activated', 1);
		
		if($category_id) {
			$qb->andWhere('j.category=:category_id')
				->setParameter('category_id', $category_id);
		}
		
		$query = $qb->getQuery();
		
		return $query->getSingleScalarResult();
	}
	
	
	public function cleanup($days) {
		$query = $this->createQueryBuilder('j')
					->delete()
					->where('j.is_activated IS NULL')
					->andWhere('j.created_at < :created_at')
					->setParameter('created_at', time('Y-m-d', time() - 86400 * $days))
					->getQuery();
		
		return $query->execute();
	}
	
	
	public function getLatestPost($category_id = null)
	{
		$query = $this->createQueryBuilder('j')
					->where('j.expires_at > :date')
					->andWhere('j.is_activated = :activated')
					->orderBy('j.expires_at', 'DESC')
					->setMaxResults(1)
					->setParameter('date', date('Y-m-d H:i:s', time()))
					->setParameter('activated', 1);

		if($category_id) {
			$query->andWhere('j.category=:category_id')->setParameter('category_id', $category_id);
		}
		
		try {
			$job = $query->getQuery()->getSingleResult();
		}catch (\Doctrine\ORM\NonUniqueResultException $e) {
			$job = null;
		}
		
		return $job;
	}
	
	
	public function getForLuceneQuery($query)
	{
		$hits = Job::getLuceneIndex()->find($query);
		$pks = array();
		
		foreach ($hits as $hit) {
			$pks[] = $hit->pk;
		}
		
		if(empty($pks)) {
			return array();
		}
		
		
		$q = $this->createQueryBuilder('j')
				->where('j.id IN (:pks)')
				->setParameter('pks', $pks)
				->andWhere('j.is_activated = :active')
				->setParameter('active', 1)
				->setMaxResults(20)
				->getQuery()
		;
		
		return $q->getResult();
	}
}
